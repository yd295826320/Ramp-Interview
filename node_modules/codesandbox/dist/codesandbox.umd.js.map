{"version":3,"file":"codesandbox.umd.js","sources":["../src/actions/notifications.ts","../src/actions/editor.ts","../src/actions/source/dependencies.ts","../src/actions/source/modules.ts","../src/actions/source/index.ts","../src/actions/error.ts","../src/actions/index.ts","../src/dispatcher/host.ts","../src/dispatcher/index.ts","../src/codesandbox.ts"],"sourcesContent":["import { Action } from './';\n\nexport interface NotificationAction extends Action {\n  title: string;\n  notificationType: 'notice' | 'warning' | 'error' | 'success';\n  timeAlive: number;\n}\n\n/**\n * Returns an action that describes to open a notification in the editor\n *\n * @export\n * @param {string} title\n * @param {('notice' | 'warning' | 'error' | 'success')} [notificationType='notice']\n * @param {number} [timeAlive=2] How long the notification should show in seconds\n * @returns {NotificationAction}\n */\nexport function show(\n  title: string,\n  notificationType: 'notice' | 'warning' | 'error' | 'success' = 'notice',\n  timeAlive: number = 2,\n): NotificationAction {\n  // TODO automatically add type: 'action', maybe do this after conversion to TS\n  return {\n    type: 'action',\n    action: 'notification',\n    title,\n    notificationType,\n    timeAlive,\n  };\n}\n","import { Action } from './';\n\nexport interface OpenModuleAction extends Action {\n  moduleId: string;\n  lineNumber: number;\n}\n\nexport function openModule(\n  id: string,\n  lineNumber: number = 1,\n): OpenModuleAction {\n  // TODO automatically add type: 'action', maybe do this after conversion to TS\n  return {\n    type: 'action',\n    action: 'editor.open-module',\n    moduleId: id,\n    lineNumber,\n  };\n}\n","import { Action } from '../';\n\nexport function add(dependencyName: string) {\n  return {\n    type: 'action',\n    action: 'source.dependencies.add',\n    dependency: dependencyName,\n  };\n}\n","import { Action } from '../';\n\nexport function rename(moduleId: string, title: string) {\n  return {\n    type: 'action',\n    action: 'source.module.rename',\n    moduleId,\n    title,\n  };\n}\n","import * as d from './dependencies';\nimport * as m from './modules';\n\nexport const dependencies = d;\nexport const modules = m;\n","import { Action } from './';\n\nexport interface ErrorOptions {\n  line?: number;\n  column?: number;\n  moduleId?: string;\n  payload?: Object;\n}\n\nexport interface ErrorAction extends Action {\n  title: string;\n  message: string;\n  line?: number;\n  column?: number;\n  moduleId?: string;\n  payload?: Object;\n}\n\n/**\n * Returns an action that describes to show an error\n * in the code of the editor (with the red squiggles)\n *\n * @export\n * @param {string} title\n * @param {string} message\n * @param {ErrorOptions} { line, column, moduleId, payload }\n * @returns {ErrorAction}\n */\nexport function show(\n  title: string,\n  message: string,\n  { line, column, moduleId, payload }: ErrorOptions,\n): ErrorAction {\n  return {\n    title,\n    message,\n    line,\n    column,\n    moduleId,\n    payload,\n    type: 'action',\n    action: 'show-error',\n  };\n}\n","// All actions of the editor are defined here. The sandbox can send messages\n// like `source.files.rename` which the editor will see as an action to rename\n// a module. This will allow plugins to alter project content in the future\n\nimport * as notifications from './notifications';\nimport * as editor from './editor';\nimport * as source from './source';\nimport * as error from './error';\n\nexport interface Action {\n  type: 'action';\n  action: string;\n}\n\nexport const actions = {\n  notifications,\n  editor,\n  source,\n  error,\n};\n","const host = process.env.CODESANDBOX_HOST;\n\nexport default host || 'https://codesandbox.io';\n","// import * as debug from 'debug';\nimport host from './host';\n\n// Whether the tab has a connection with the editor\nexport const isStandalone =\n  typeof window === 'undefined' || (!window.opener && window.parent === window);\n\n/**\n * Send a message to the editor, this is most probably an action you generated\n *\n * @export\n * @param {*} message\n * @returns\n */\nexport function dispatch(message: any) {\n  if (!message) return;\n  if (isStandalone) return;\n\n  if (window.opener) {\n    window.opener.postMessage(message, host);\n  } else {\n    window.parent.postMessage(message, host);\n  }\n}\n","// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\n// import \"core-js/fn/array.find\"\n// ...\n\nexport * from './actions';\nexport * from './dispatcher';\n"],"names":["host"],"mappings":";;;;;;AAQA;;;;;;;;;AASA,cACE,KAAa,EACb,gBAAuE,EACvE,SAAqB;IADrB,iCAAA,EAAA,2BAAuE;IACvE,0BAAA,EAAA,aAAqB;;IAGrB,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,cAAc;QACtB,KAAK,OAAA;QACL,gBAAgB,kBAAA;QAChB,SAAS,WAAA;KACV,CAAC;CACH;;;;;;;oBCtBC,EAAU,EACV,UAAsB;IAAtB,2BAAA,EAAA,cAAsB;;IAGtB,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,oBAAoB;QAC5B,QAAQ,EAAE,EAAE;QACZ,UAAU,YAAA;KACX,CAAC;CACH;;;;;;;aChBmB,cAAsB;IACxC,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,yBAAyB;QACjC,UAAU,EAAE,cAAc;KAC3B,CAAC;CACH;;;;;;;gBCNsB,QAAgB,EAAE,KAAa;IACpD,OAAO;QACL,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,sBAAsB;QAC9B,QAAQ,UAAA;QACR,KAAK,OAAA;KACN,CAAC;CACH;;;;;;;ACNM,IAAM,YAAY,GAAG,CAAC,CAAC;AAC9B,AAAO,IAAM,OAAO,GAAG,CAAC,CAAC;;;;;;;;ACczB;;;;;;;;;;AAUA,gBACE,KAAa,EACb,OAAe,EACf,EAAiD;QAA/C,cAAI,EAAE,kBAAM,EAAE,sBAAQ,EAAE,oBAAO;IAEjC,OAAO;QACL,KAAK,OAAA;QACL,OAAO,SAAA;QACP,IAAI,MAAA;QACJ,MAAM,QAAA;QACN,QAAQ,UAAA;QACR,OAAO,SAAA;QACP,IAAI,EAAE,QAAQ;QACd,MAAM,EAAE,YAAY;KACrB,CAAC;CACH;;;;;;;AC3CD;;;AAIA,AAUO,IAAM,OAAO,GAAG;IACrB,aAAa,eAAA;IACb,MAAM,QAAA;IACN,MAAM,QAAA;IACN,KAAK,OAAA;CACN;;ACnBD,IAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;AAE1C,aAAe,IAAI,IAAI,wBAAwB,CAAC;;ACFhD;AACA,AAEA;AACA,AAAO,IAAM,YAAY,GACvB,OAAO,MAAM,KAAK,WAAW,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;;;;;;;;AAShF,kBAAyB,OAAY;IACnC,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,IAAI,YAAY;QAAE,OAAO;IAEzB,IAAI,MAAM,CAAC,MAAM,EAAE;QACjB,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAEA,MAAI,CAAC,CAAC;KAC1C;SAAM;QACL,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,EAAEA,MAAI,CAAC,CAAC;KAC1C;CACF;;ACvBD;;MAEM;;;;;;;;;;;;;;"}